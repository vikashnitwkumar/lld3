//Udemy class diagram

class Udemy{
    List<Course> courses;
    List<Instructor> instructors;
    List<Learner> learners;
    CourseService courseService;
    UserService userService;
}

class Course{
    Long id;
    String name;
    double price;
    Date createdAt;
    Date updatedAt;
    Category category;
    Level level;
    List<AudioLanguage> audioLanguages;
    List<SubtitleLanguage> subtitleLanguages;
    List<Instructor> instructors;
    List<Module> modules;
    String description;
    double rating;
    double ratingCount; 
    List<Review> courseReviews;   
    double courseDuration;
    int lectureCount;
    int moduleCount;
    int assignmentCount;
    int quizCount;
    int enrollmentCount;
    getModules(); List<Module>
    getCourses(); List<Course>
}

class Module{
    Long id;
    String name;
    List<Lecture> lectures;
    getCourses() : List<Course>
}

class Lecture {
    Long id;
    String name;
    String description;
    String videoUrl;
    Module module;
    List<AudioLanguage> audioLanguages;
    List<SubtitleLanguage> subtitleLanguages;
    List<Assignment> assignments;
    List<Quiz> quizzes;
    List<Attachment> attachments; // for reference material
    Instructor instructor;
    double rating;
    int ratingCount;
    int viewCount;
    double lectureDuration;
}


enum AudioLanguage{ENGLISH, FRENCH, GERMAN, SPANISH}
enum SubtitleLanguage{ENGLISH, FRENCH, GERMAN, SPANISH}

interface Question{
    long id;
    String name;
    String description;
    List<Instructor> setters;
    List<String> possibleSoLutions;
    List<String> comments;
    List<Review> assignmentReviews;
    int maxScore;
    int totalSubmissions;
    int acceptedSubmissions;
    Date createdDate;
    Date updatedDate;
    QuestionType questionType;    
}
class Assignment{
    Long id;
    Lecture lecture;
    String name;
    String description;
    List<Question> questions;    
    QuestionType questionType;
}

class Quiz{
    Long id;
    Lecture lecture;
    String name;
    String description;
    List<Question> questions;    
    QuestionType questionType;
}

class QuizSubmission{
    Quiz quiz;
    Learner submitter;
    double currentScore;
    Date submittedAt;
    String Solution;
}

class AssignmentSubmission{
    Assignment assignment;
    Learner submitter;
    double currentScore;
    Date submittedAt;
    String Solution;
}

enum AssignmentType{ASSIGNMENT, QUIZ}

class user{
    long id;
    String name;
    String email;
    String password;
    String List<Role> roles;
}

enum Role{STUDENT, ADMIN, INSTRUCTOR}

class Instructor extends User{
    List<Course> courses;
    List<Review> instructorReviews;
}

class Learner extends User{
    List<EnrolledCourse> enrolledCourses;
    List<Review> learnerReviews;
    List<AssignmentSubmission> assignmentSubmissions;
    List<QuizSubmission> quizSubmissions;
}

class EnrolledCourse {
    Long id;
    Course course;
    Date joinedAt;
    Date expiryDate;
    CourseStatus courseStatus;
    List<LectureView> lectureViews;
}


enum CourseStatus { NOT_STARTED, IN_PROGRESS, COMPLETED, DROPPED, EXPIRED }

class LectureView {
    Long id;
    Lecture lecture;
    Learner learner;
    Date viewedAt;
    double viewedDuration; 
    LectureProgress lectureProgress;
}


enum LectureProgress{NOT_STARTED, IN_PROGRESS, COMPLETED}

interface Reviewable {
    List<Review> getReviews();
}

class Review {
    Long id;
    String comment;
    double rating;
    Learner reviewer;
    Date createdAt;
    Date updatedAt;
    Reviewable reviewable; 
}

class CourseService {
    List<Course> getCourses();
    List<Instructor> getInstructors();
    Course getCourseById(Long courseId);
    Instructor getInstructorById(Long instructorId);
    List<Lecture> getLecturesByCourseId(Long courseId);

    void addCourse(Course course);
    void updateCourse(Course course);
    void removeCourse(Long courseId); 
}


class UserService {
    User login(String email, String password);
    User register(String name, String email, String password);
    void addRole(User user, Role role);
    void removeRole(User user, Role role);
    void purchaseCourse(User user, Course course); 
    void resumeLecture(User user, Lecture lecture); 
}