//DeepSeek

class Restaurant {
    Long id;
    String name;
    Address address;
    Set<CuisineType> cuisinesServed;
    Menu menu;
    List<Waiter> waiters;
    List<Chef> chefs;
    
    void addWaiter(Waiter waiter) {...}
    void addChef(Chef chef) {...}
}

class Address {
    long id;
    String street;
    String city;
    String state;
    String country;
    String zipCode;
}

class Menu {
    List<MenuSection> sections;
}

class MenuSection {
    String name; // e.g., "Soups", "Appetizers"
    List<Dish> dishes;
}

class Dish {
    Long id;
    String name;
    String description;
    DishType type;
    double price;
    String recipeInstructions;
    List<IngredientRequirement> ingredients;
}

class IngredientRequirement {
    Ingredient ingredient;
    double quantity;
    MeasurementUnit unit;
    
    enum MeasurementUnit {
        GRAMS, MILLILITERS
    }
}

class Ingredient {
    Long id;
    String name;
    String description;
    MeasurementUnit baseUnit;
}

enum DishType {
    VEG, NON_VEG, VEGAN
}

abstract class Employee {
    Long id;
    String name;
    String email;
    String phoneNumber;
}

class Chef extends Employee {
    ChefLevel level;
}

enum ChefLevel {
    COMMIS_CHEF, SOUS_CHEF, HEAD_CHEF, EXECUTIVE_CHEF
}

class Waiter extends Employee {
    WaiterLevel level;
}

enum WaiterLevel {
    JUNIOR, SENIOR, MANAGER
}

class Customer {
    Long id;
    String name;
    String email;
    String phoneNumber;
}

class DiningVisit {
    Long id;
    LocalDateTime startTime;
    LocalDateTime endTime;
    Customer customer;
    Restaurant restaurant;
    List<Order> orders;
    Payment finalPayment;
}

class Order {
    Long id;
    LocalDateTime orderTime;
    OrderStatus status;
    List<OrderItem> items;
    
    double calculateTotal() {
        return items.stream()
            .mapToDouble(OrderItem::calculateSubtotal)
            .sum();
    }
}

class OrderItem {
    Dish dish;
    int quantity;
    
    double calculateSubtotal() {
        return dish.price * quantity;
    }
}

enum OrderStatus {
    RECEIVED, PREPARING, READY_TO_SERVE, DELIVERED, CANCELLED
}

class Payment {
    Long id;
    double amount;
    PaymentMethod method;
    PaymentStatus status;
    LocalDateTime paymentTime;
}

enum PaymentMethod {
    CASH, CREDIT_CARD, DEBIT_CARD, UPI, NET_BANKING
}

enum PaymentStatus {
    PENDING, COMPLETED, FAILED, REFUNDED
}